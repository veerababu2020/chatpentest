import openai
import subprocess
import pyfiglet
pyfiglet_design = pyfiglet.figlet_format("chatpentest")
print(pyfiglet_design)

# Set your OpenAI API key here
OPENAI_API_KEY = "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"

# Function to communicate with ChatGPT API and generate Nmap commands
def generate_nmap_command(text, target):
    prompt = f"Generate an nmap command to {text} for host or IP address '{target}'"
    command = None

    while not command or "<host or IP address>" in command:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=64,
            n=1,
            stop=None,
            temperature=0.7,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            api_key=OPENAI_API_KEY
        )
        command = response.choices[0].text.strip()

    # Remove any occurrences of the target IP address in the generated command
    command = command.replace(target, "")
    return command.strip()


# Function to run Nmap command and return the output
def run_nmap_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.stdout.strip().replace('\r', '')
    except Exception as e:
        return f"Error occurred: {e}"


# Function to check if user input is relevant for Nmap
def is_relevant(text):
    # Add your custom logic to determine relevance
    # Here's a simple example
    keywords = ['scan', 'port', 'nmap', 'ss']
    return any(keyword in text for keyword in keywords)


def perform_nmap_scan(ip_address, nmap_command):
    full_nmap_command = f"nmap {nmap_command} {ip_address}"
    nmap_output = run_nmap_command(full_nmap_command)
    return nmap_output


def main():
    print("Welcome to Nmap ChatGPT Integration!")
    print("Type 'exit' to quit.")

    while True:
        # Prompt user for the query
        user_input = input("\nEnter your user Text: ")

        if user_input.lower() == 'exit':
            print("Goodbye!")
            break

        if is_relevant(user_input):
            # Ask user for the IP address
            ip_address = input("Enter the IP address to scan: ")
            if ip_address:
                # Generate Nmap command using ChatGPT with user query and IP address
                nmap_command = generate_nmap_command(user_input, ip_address)

                # Display the generated Nmap command
                print("\nGenerated Nmap Command:")
                print(nmap_command,ip_address)

                # Perform Nmap scan
                results = perform_nmap_scan(ip_address, nmap_command)
                print(results)
            else:
                print("Invalid IP address.")
        else:
            print("Sorry, the input text is not relevant.")


if __name__ == "__main__":
    main()
